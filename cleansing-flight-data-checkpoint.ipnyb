{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1611,
     "status": "ok",
     "timestamp": 1663314391659,
     "user": {
      "displayName": "Nurul Fitri Febryani",
      "userId": "17066624509266672132"
     },
     "user_tz": -420
    },
    "id": "fKAL7c4I9cwa",
    "outputId": "18f466ac-c24f-4261-bb87-2c1cad6b0554"
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import pandas as pd\n",
    "\n",
    "sns.set(rc={'figure.figsize':(20.7,8.27)})\n",
    "sns.set_style(\"whitegrid\")\n",
    "sns.color_palette(\"dark\")\n",
    "plt.style.use(\"fivethirtyeight\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_rows',None)\n",
    "pd.set_option('display.max_column',None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nyDUk6fH9k2G"
   },
   "source": [
    "# Data Collection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 317
    },
    "executionInfo": {
     "elapsed": 1659,
     "status": "ok",
     "timestamp": 1660506231087,
     "user": {
      "displayName": "Nurul Fitri Febryani",
      "userId": "17066624509266672132"
     },
     "user_tz": -420
    },
    "id": "U_EN4EoFa6Yj",
    "outputId": "373599e6-16f2-45ec-a32b-780426f4ff5d"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MEMBER_NO</th>\n",
       "      <th>FFP_DATE</th>\n",
       "      <th>FIRST_FLIGHT_DATE</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>FFP_TIER</th>\n",
       "      <th>WORK_CITY</th>\n",
       "      <th>WORK_PROVINCE</th>\n",
       "      <th>WORK_COUNTRY</th>\n",
       "      <th>AGE</th>\n",
       "      <th>LOAD_TIME</th>\n",
       "      <th>FLIGHT_COUNT</th>\n",
       "      <th>BP_SUM</th>\n",
       "      <th>SUM_YR_1</th>\n",
       "      <th>SUM_YR_2</th>\n",
       "      <th>SEG_KM_SUM</th>\n",
       "      <th>LAST_FLIGHT_DATE</th>\n",
       "      <th>LAST_TO_END</th>\n",
       "      <th>AVG_INTERVAL</th>\n",
       "      <th>MAX_INTERVAL</th>\n",
       "      <th>EXCHANGE_COUNT</th>\n",
       "      <th>avg_discount</th>\n",
       "      <th>Points_Sum</th>\n",
       "      <th>Point_NotFlight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>54993</td>\n",
       "      <td>11/2/2006</td>\n",
       "      <td>12/24/2008</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>.</td>\n",
       "      <td>beijing</td>\n",
       "      <td>CN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>3/31/2014</td>\n",
       "      <td>210</td>\n",
       "      <td>505308</td>\n",
       "      <td>239560.0</td>\n",
       "      <td>234188.0</td>\n",
       "      <td>580717</td>\n",
       "      <td>3/31/2014</td>\n",
       "      <td>1</td>\n",
       "      <td>3.483254</td>\n",
       "      <td>18</td>\n",
       "      <td>34</td>\n",
       "      <td>0.961639</td>\n",
       "      <td>619760</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>28065</td>\n",
       "      <td>2/19/2007</td>\n",
       "      <td>8/3/2007</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>beijing</td>\n",
       "      <td>CN</td>\n",
       "      <td>42.0</td>\n",
       "      <td>3/31/2014</td>\n",
       "      <td>140</td>\n",
       "      <td>362480</td>\n",
       "      <td>171483.0</td>\n",
       "      <td>167434.0</td>\n",
       "      <td>293678</td>\n",
       "      <td>3/25/2014</td>\n",
       "      <td>7</td>\n",
       "      <td>5.194245</td>\n",
       "      <td>17</td>\n",
       "      <td>29</td>\n",
       "      <td>1.252314</td>\n",
       "      <td>415768</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>55106</td>\n",
       "      <td>2/1/2007</td>\n",
       "      <td>8/30/2007</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>.</td>\n",
       "      <td>beijing</td>\n",
       "      <td>CN</td>\n",
       "      <td>40.0</td>\n",
       "      <td>3/31/2014</td>\n",
       "      <td>135</td>\n",
       "      <td>351159</td>\n",
       "      <td>163618.0</td>\n",
       "      <td>164982.0</td>\n",
       "      <td>283712</td>\n",
       "      <td>3/21/2014</td>\n",
       "      <td>11</td>\n",
       "      <td>5.298507</td>\n",
       "      <td>18</td>\n",
       "      <td>20</td>\n",
       "      <td>1.254676</td>\n",
       "      <td>406361</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21189</td>\n",
       "      <td>8/22/2008</td>\n",
       "      <td>8/23/2008</td>\n",
       "      <td>Male</td>\n",
       "      <td>5</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>CA</td>\n",
       "      <td>US</td>\n",
       "      <td>64.0</td>\n",
       "      <td>3/31/2014</td>\n",
       "      <td>23</td>\n",
       "      <td>337314</td>\n",
       "      <td>116350.0</td>\n",
       "      <td>125500.0</td>\n",
       "      <td>281336</td>\n",
       "      <td>12/26/2013</td>\n",
       "      <td>97</td>\n",
       "      <td>27.863636</td>\n",
       "      <td>73</td>\n",
       "      <td>11</td>\n",
       "      <td>1.090870</td>\n",
       "      <td>372204</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>39546</td>\n",
       "      <td>4/10/2009</td>\n",
       "      <td>4/15/2009</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>guiyang</td>\n",
       "      <td>guizhou</td>\n",
       "      <td>CN</td>\n",
       "      <td>48.0</td>\n",
       "      <td>3/31/2014</td>\n",
       "      <td>152</td>\n",
       "      <td>273844</td>\n",
       "      <td>124560.0</td>\n",
       "      <td>130702.0</td>\n",
       "      <td>309928</td>\n",
       "      <td>3/27/2014</td>\n",
       "      <td>5</td>\n",
       "      <td>4.788079</td>\n",
       "      <td>47</td>\n",
       "      <td>27</td>\n",
       "      <td>0.970658</td>\n",
       "      <td>338813</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MEMBER_NO   FFP_DATE FIRST_FLIGHT_DATE GENDER  FFP_TIER    WORK_CITY  \\\n",
       "0      54993  11/2/2006        12/24/2008   Male         6            .   \n",
       "1      28065  2/19/2007          8/3/2007   Male         6          NaN   \n",
       "2      55106   2/1/2007         8/30/2007   Male         6            .   \n",
       "3      21189  8/22/2008         8/23/2008   Male         5  Los Angeles   \n",
       "4      39546  4/10/2009         4/15/2009   Male         6      guiyang   \n",
       "\n",
       "  WORK_PROVINCE WORK_COUNTRY   AGE  LOAD_TIME  FLIGHT_COUNT  BP_SUM  SUM_YR_1  \\\n",
       "0       beijing           CN  31.0  3/31/2014           210  505308  239560.0   \n",
       "1       beijing           CN  42.0  3/31/2014           140  362480  171483.0   \n",
       "2       beijing           CN  40.0  3/31/2014           135  351159  163618.0   \n",
       "3            CA           US  64.0  3/31/2014            23  337314  116350.0   \n",
       "4       guizhou           CN  48.0  3/31/2014           152  273844  124560.0   \n",
       "\n",
       "   SUM_YR_2  SEG_KM_SUM LAST_FLIGHT_DATE  LAST_TO_END  AVG_INTERVAL  \\\n",
       "0  234188.0      580717        3/31/2014            1      3.483254   \n",
       "1  167434.0      293678        3/25/2014            7      5.194245   \n",
       "2  164982.0      283712        3/21/2014           11      5.298507   \n",
       "3  125500.0      281336       12/26/2013           97     27.863636   \n",
       "4  130702.0      309928        3/27/2014            5      4.788079   \n",
       "\n",
       "   MAX_INTERVAL  EXCHANGE_COUNT  avg_discount  Points_Sum  Point_NotFlight  \n",
       "0            18              34      0.961639      619760               50  \n",
       "1            17              29      1.252314      415768               33  \n",
       "2            18              20      1.254676      406361               26  \n",
       "3            73              11      1.090870      372204               12  \n",
       "4            47              27      0.970658      338813               39  "
      ]
     },
     "execution_count": 268,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('16-flight.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Drop column unique id yang tidak digunakan seperti \"Member_No\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data.drop('MEMBER_NO', axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cleansing Column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cleansing Column City, Work_Province, dan Work_Country\n",
    "for i in ['WORK_CITY', 'WORK_PROVINCE','WORK_COUNTRY']:\n",
    "    data[i] = data[i].str.replace(r'^\\.$', '')\n",
    "    data[i] = data[i].str.replace('NaN', '')\n",
    "    data[i] = data[i].str.replace('#NAME?', '')\n",
    "    data[i] = data[i].str.replace('*', '')\n",
    "    data[i] = data[i].str.replace('-', '')\n",
    "    data[i] = data[i].str.replace('。', '')\n",
    "    data[i] = data[i].str.replace('－', '')\n",
    "    data[i] = data[i].str.replace('Ｔｗ', '')\n",
    "    data[i] = data[i].str.replace('.', '')\n",
    "    data[i] = data[i].str.replace('\\'', '')\n",
    "    data[i] = data[i].str.replace('?', '')\n",
    "    data[i] = data[i].str.replace('/', '')\n",
    "    data[i] = data[i].str.replace('`', '')\n",
    "    data[i] = data[i].str.replace('=', '')\n",
    "    data[i] = data[i].str.replace('——', '')\n",
    "    data[i] = data[i].str.strip()\n",
    "    \n",
    "data['WORK_CITY'] = data['WORK_CITY'].replace(r'^\\s*$', np.nan, regex=True)\n",
    "data['WORK_PROVINCE'] = data['WORK_PROVINCE'].replace(r'^\\s*$', np.nan, regex=True)\n",
    "data['WORK_COUNTRY'] = data['WORK_COUNTRY'].replace(r'^\\s*$', np.nan, regex=True)\n",
    "\n",
    "#Consistency Data\n",
    "data.WORK_CITY = data.WORK_CITY.str.capitalize()\n",
    "data.WORK_PROVINCE = data.WORK_PROVINCE.str.capitalize()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "i70el7mYa6Ym"
   },
   "source": [
    "## Check Null and Missing Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>missing_value</th>\n",
       "      <th>percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [feature, missing_value, percentage]\n",
       "Index: []"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_null = data.isnull().sum().reset_index()\n",
    "data_null.columns = ['feature','missing_value']\n",
    "data_null['percentage'] = round((data_null['missing_value']/len(data))*100,2)\n",
    "data_null = data_null.sort_values('percentage', ascending=False).reset_index(drop=True)\n",
    "data_null = data_null[data_null['percentage']>0]\n",
    "data_null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data.dropna()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Rbd7Dsdn5IIg"
   },
   "source": [
    "## Duplicate Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 356,
     "status": "ok",
     "timestamp": 1660506380501,
     "user": {
      "displayName": "Nurul Fitri Febryani",
      "userId": "17066624509266672132"
     },
     "user_tz": -420
    },
    "id": "3Z48mXOra6Yx",
    "outputId": "7e2fd9d1-90a0-46d7-9463-3837fe38c5b4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 273,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 349,
     "status": "ok",
     "timestamp": 1660506388653,
     "user": {
      "displayName": "Nurul Fitri Febryani",
      "userId": "17066624509266672132"
     },
     "user_tz": -420
    },
    "id": "ewOdYAzc5JNl",
    "outputId": "fd0f1184-ed66-4904-e81c-bd494130bb29"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 274,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data.drop_duplicates()\n",
    "data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "H6Tgczjz4mv9"
   },
   "source": [
    "# Data Understanding"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 381,
     "status": "ok",
     "timestamp": 1660506252875,
     "user": {
      "displayName": "Nurul Fitri Febryani",
      "userId": "17066624509266672132"
     },
     "user_tz": -420
    },
    "id": "UA1NVLJhmTe7",
    "outputId": "bbeaf5b7-92ce-4275-af05-935cd7d1a6a9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 56333 entries, 3 to 62986\n",
      "Data columns (total 23 columns):\n",
      " #   Column               Non-Null Count  Dtype         \n",
      "---  ------               --------------  -----         \n",
      " 0   FFP_DATE             56333 non-null  datetime64[ns]\n",
      " 1   GENDER               56333 non-null  object        \n",
      " 2   FFP_TIER             56333 non-null  int64         \n",
      " 3   WORK_CITY            56333 non-null  object        \n",
      " 4   WORK_PROVINCE        56333 non-null  object        \n",
      " 5   WORK_COUNTRY         56333 non-null  object        \n",
      " 6   AGE                  56333 non-null  float64       \n",
      " 7   LOAD_TIME            56333 non-null  datetime64[ns]\n",
      " 8   FLIGHT_COUNT         56333 non-null  int64         \n",
      " 9   BP_SUM               56333 non-null  int64         \n",
      " 10  SUM_YR_1             56333 non-null  float64       \n",
      " 11  SUM_YR_2             56333 non-null  float64       \n",
      " 12  SEG_KM_SUM           56333 non-null  int64         \n",
      " 13  LAST_FLIGHT_DATE     56333 non-null  object        \n",
      " 14  LAST_TO_END          56333 non-null  int64         \n",
      " 15  AVG_INTERVAL         56333 non-null  float64       \n",
      " 16  MAX_INTERVAL         56333 non-null  int64         \n",
      " 17  EXCHANGE_COUNT       56333 non-null  int64         \n",
      " 18  avg_discount         56333 non-null  float64       \n",
      " 19  Points_Sum           56333 non-null  int64         \n",
      " 20  Point_NotFlight      56333 non-null  int64         \n",
      " 21  FIRST_FLIGHT_DATE_2  56333 non-null  object        \n",
      " 22  MEMBERSHIP           56333 non-null  float64       \n",
      "dtypes: datetime64[ns](2), float64(6), int64(9), object(6)\n",
      "memory usage: 10.3+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {
    "id": "1OHCgjzd4rWb"
   },
   "outputs": [],
   "source": [
    "data['FFP_DATE'] = pd.to_datetime(data['FFP_DATE'])\n",
    "data['FIRST_FLIGHT_DATE'] = pd.to_datetime(data['FIRST_FLIGHT_DATE'])\n",
    "data['LOAD_TIME'] = pd.to_datetime(data['LOAD_TIME'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mencari nilai first_flight\n",
    "first_flight = pd.to_datetime(data['FIRST_FLIGHT_DATE'])\n",
    "data['FIRST_FLIGHT_DATE_2'] = first_flight.dt.date\n",
    "data = data.drop(['FIRST_FLIGHT_DATE'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 363,
     "status": "ok",
     "timestamp": 1660506267956,
     "user": {
      "displayName": "Nurul Fitri Febryani",
      "userId": "17066624509266672132"
     },
     "user_tz": -420
    },
    "id": "PueTtlYS9mBd",
    "outputId": "6c37d8ad-dee8-4adc-9d71-68b6faa1e1c9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 56334 entries, 3 to 62986\n",
      "Data columns (total 22 columns):\n",
      " #   Column               Non-Null Count  Dtype         \n",
      "---  ------               --------------  -----         \n",
      " 0   FFP_DATE             56334 non-null  datetime64[ns]\n",
      " 1   GENDER               56334 non-null  object        \n",
      " 2   FFP_TIER             56334 non-null  int64         \n",
      " 3   WORK_CITY            56334 non-null  object        \n",
      " 4   WORK_PROVINCE        56334 non-null  object        \n",
      " 5   WORK_COUNTRY         56334 non-null  object        \n",
      " 6   AGE                  56334 non-null  float64       \n",
      " 7   LOAD_TIME            56334 non-null  datetime64[ns]\n",
      " 8   FLIGHT_COUNT         56334 non-null  int64         \n",
      " 9   BP_SUM               56334 non-null  int64         \n",
      " 10  SUM_YR_1             56334 non-null  float64       \n",
      " 11  SUM_YR_2             56334 non-null  float64       \n",
      " 12  SEG_KM_SUM           56334 non-null  int64         \n",
      " 13  LAST_FLIGHT_DATE     56334 non-null  object        \n",
      " 14  LAST_TO_END          56334 non-null  int64         \n",
      " 15  AVG_INTERVAL         56334 non-null  float64       \n",
      " 16  MAX_INTERVAL         56334 non-null  int64         \n",
      " 17  EXCHANGE_COUNT       56334 non-null  int64         \n",
      " 18  avg_discount         56334 non-null  float64       \n",
      " 19  Points_Sum           56334 non-null  int64         \n",
      " 20  Point_NotFlight      56334 non-null  int64         \n",
      " 21  FIRST_FLIGHT_DATE_2  56334 non-null  object        \n",
      "dtypes: datetime64[ns](2), float64(5), int64(9), object(6)\n",
      "memory usage: 9.9+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 300
    },
    "executionInfo": {
     "elapsed": 479,
     "status": "ok",
     "timestamp": 1660506273594,
     "user": {
      "displayName": "Nurul Fitri Febryani",
      "userId": "17066624509266672132"
     },
     "user_tz": -420
    },
    "id": "Sq_Kn7KP4vCW",
    "outputId": "b6bc65da-70be-4c1e-88b7-506c66ec9511",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FFP_TIER</th>\n",
       "      <th>AGE</th>\n",
       "      <th>FLIGHT_COUNT</th>\n",
       "      <th>BP_SUM</th>\n",
       "      <th>SUM_YR_1</th>\n",
       "      <th>SUM_YR_2</th>\n",
       "      <th>SEG_KM_SUM</th>\n",
       "      <th>LAST_TO_END</th>\n",
       "      <th>AVG_INTERVAL</th>\n",
       "      <th>MAX_INTERVAL</th>\n",
       "      <th>EXCHANGE_COUNT</th>\n",
       "      <th>avg_discount</th>\n",
       "      <th>Points_Sum</th>\n",
       "      <th>Point_NotFlight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.00000</td>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.000000</td>\n",
       "      <td>56334.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.099940</td>\n",
       "      <td>42.237991</td>\n",
       "      <td>12.096798</td>\n",
       "      <td>11016.323357</td>\n",
       "      <td>5355.700412</td>\n",
       "      <td>5668.741950</td>\n",
       "      <td>17395.131750</td>\n",
       "      <td>170.829251</td>\n",
       "      <td>67.731164</td>\n",
       "      <td>167.42438</td>\n",
       "      <td>0.330014</td>\n",
       "      <td>0.717756</td>\n",
       "      <td>12700.335410</td>\n",
       "      <td>2.870806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.366562</td>\n",
       "      <td>9.738126</td>\n",
       "      <td>14.138999</td>\n",
       "      <td>15902.481480</td>\n",
       "      <td>7948.554850</td>\n",
       "      <td>8534.021113</td>\n",
       "      <td>20759.889139</td>\n",
       "      <td>180.452993</td>\n",
       "      <td>77.167628</td>\n",
       "      <td>122.72693</td>\n",
       "      <td>1.140353</td>\n",
       "      <td>0.180722</td>\n",
       "      <td>20186.582443</td>\n",
       "      <td>7.570716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>368.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2605.000000</td>\n",
       "      <td>1016.000000</td>\n",
       "      <td>854.000000</td>\n",
       "      <td>4923.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>23.728788</td>\n",
       "      <td>81.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.611051</td>\n",
       "      <td>2875.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>5844.000000</td>\n",
       "      <td>2820.000000</td>\n",
       "      <td>2853.000000</td>\n",
       "      <td>10294.500000</td>\n",
       "      <td>103.000000</td>\n",
       "      <td>44.714286</td>\n",
       "      <td>144.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.709897</td>\n",
       "      <td>6512.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>13044.750000</td>\n",
       "      <td>6624.000000</td>\n",
       "      <td>6967.500000</td>\n",
       "      <td>21721.000000</td>\n",
       "      <td>257.000000</td>\n",
       "      <td>81.857143</td>\n",
       "      <td>228.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.805245</td>\n",
       "      <td>14572.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>213.000000</td>\n",
       "      <td>337314.000000</td>\n",
       "      <td>188926.000000</td>\n",
       "      <td>174895.000000</td>\n",
       "      <td>375074.000000</td>\n",
       "      <td>731.000000</td>\n",
       "      <td>728.000000</td>\n",
       "      <td>728.00000</td>\n",
       "      <td>46.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>985572.000000</td>\n",
       "      <td>140.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           FFP_TIER           AGE  FLIGHT_COUNT         BP_SUM       SUM_YR_1  \\\n",
       "count  56334.000000  56334.000000  56334.000000   56334.000000   56334.000000   \n",
       "mean       4.099940     42.237991     12.096798   11016.323357    5355.700412   \n",
       "std        0.366562      9.738126     14.138999   15902.481480    7948.554850   \n",
       "min        4.000000      6.000000      2.000000       0.000000       0.000000   \n",
       "25%        4.000000     35.000000      3.000000    2605.000000    1016.000000   \n",
       "50%        4.000000     41.000000      7.000000    5844.000000    2820.000000   \n",
       "75%        4.000000     48.000000     15.000000   13044.750000    6624.000000   \n",
       "max        6.000000    110.000000    213.000000  337314.000000  188926.000000   \n",
       "\n",
       "            SUM_YR_2     SEG_KM_SUM   LAST_TO_END  AVG_INTERVAL  MAX_INTERVAL  \\\n",
       "count   56334.000000   56334.000000  56334.000000  56334.000000   56334.00000   \n",
       "mean     5668.741950   17395.131750    170.829251     67.731164     167.42438   \n",
       "std      8534.021113   20759.889139    180.452993     77.167628     122.72693   \n",
       "min         0.000000     368.000000      1.000000      0.000000       0.00000   \n",
       "25%       854.000000    4923.000000     28.000000     23.728788      81.00000   \n",
       "50%      2853.000000   10294.500000    103.000000     44.714286     144.00000   \n",
       "75%      6967.500000   21721.000000    257.000000     81.857143     228.00000   \n",
       "max    174895.000000  375074.000000    731.000000    728.000000     728.00000   \n",
       "\n",
       "       EXCHANGE_COUNT  avg_discount     Points_Sum  Point_NotFlight  \n",
       "count    56334.000000  56334.000000   56334.000000     56334.000000  \n",
       "mean         0.330014      0.717756   12700.335410         2.870806  \n",
       "std          1.140353      0.180722   20186.582443         7.570716  \n",
       "min          0.000000      0.000000       0.000000         0.000000  \n",
       "25%          0.000000      0.611051    2875.000000         0.000000  \n",
       "50%          0.000000      0.709897    6512.000000         0.000000  \n",
       "75%          0.000000      0.805245   14572.000000         1.000000  \n",
       "max         46.000000      1.500000  985572.000000       140.000000  "
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 238
    },
    "executionInfo": {
     "elapsed": 382,
     "status": "ok",
     "timestamp": 1660506280963,
     "user": {
      "displayName": "Nurul Fitri Febryani",
      "userId": "17066624509266672132"
     },
     "user_tz": -420
    },
    "id": "rB-cQfTv4wvw",
    "outputId": "3078ee6f-4f1e-4a73-ec19-4648fef0f1d5"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FFP_DATE</th>\n",
       "      <th>FIRST_FLIGHT_DATE_2</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>WORK_CITY</th>\n",
       "      <th>WORK_PROVINCE</th>\n",
       "      <th>WORK_COUNTRY</th>\n",
       "      <th>LOAD_TIME</th>\n",
       "      <th>LAST_FLIGHT_DATE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>56334</td>\n",
       "      <td>56334</td>\n",
       "      <td>56334</td>\n",
       "      <td>56334</td>\n",
       "      <td>56334</td>\n",
       "      <td>56334</td>\n",
       "      <td>56334</td>\n",
       "      <td>56334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>3061</td>\n",
       "      <td>3398</td>\n",
       "      <td>2</td>\n",
       "      <td>2703</td>\n",
       "      <td>944</td>\n",
       "      <td>99</td>\n",
       "      <td>1</td>\n",
       "      <td>730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>2011-01-13 00:00:00</td>\n",
       "      <td>2013-02-16</td>\n",
       "      <td>Male</td>\n",
       "      <td>Guangzhou</td>\n",
       "      <td>Guangdong</td>\n",
       "      <td>CN</td>\n",
       "      <td>2014-03-31 00:00:00</td>\n",
       "      <td>3/31/2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>179</td>\n",
       "      <td>82</td>\n",
       "      <td>42996</td>\n",
       "      <td>9298</td>\n",
       "      <td>17346</td>\n",
       "      <td>53240</td>\n",
       "      <td>56334</td>\n",
       "      <td>895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>first</th>\n",
       "      <td>2004-11-01 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2014-03-31 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last</th>\n",
       "      <td>2013-03-31 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2014-03-31 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   FFP_DATE FIRST_FLIGHT_DATE_2 GENDER  WORK_CITY  \\\n",
       "count                 56334               56334  56334      56334   \n",
       "unique                 3061                3398      2       2703   \n",
       "top     2011-01-13 00:00:00          2013-02-16   Male  Guangzhou   \n",
       "freq                    179                  82  42996       9298   \n",
       "first   2004-11-01 00:00:00                 NaN    NaN        NaN   \n",
       "last    2013-03-31 00:00:00                 NaN    NaN        NaN   \n",
       "\n",
       "       WORK_PROVINCE WORK_COUNTRY            LOAD_TIME LAST_FLIGHT_DATE  \n",
       "count          56334        56334                56334            56334  \n",
       "unique           944           99                    1              730  \n",
       "top        Guangdong           CN  2014-03-31 00:00:00        3/31/2014  \n",
       "freq           17346        53240                56334              895  \n",
       "first            NaN          NaN  2014-03-31 00:00:00              NaN  \n",
       "last             NaN          NaN  2014-03-31 00:00:00              NaN  "
      ]
     },
     "execution_count": 280,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_category = ['FFP_DATE','FIRST_FLIGHT_DATE_2','GENDER','WORK_CITY','WORK_PROVINCE','WORK_COUNTRY','LOAD_TIME','LAST_FLIGHT_DATE']\n",
    "data[data_category].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_category = ['GENDER','WORK_CITY','WORK_PROVINCE','WORK_COUNTRY']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Menambahkan atribut 'Membership' yang merupakan jarak waktu antara Tanggal Data Diambil dengan Join Date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['MEMBERSHIP'] = (data['LOAD_TIME'] - data['FFP_DATE']) / np.timedelta64(1,'M')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [],
   "source": [
    "numeric_pil = data[['SEG_KM_SUM','MEMBERSHIP','Points_Sum','avg_discount','Point_NotFlight', 'EXCHANGE_COUNT','FLIGHT_COUNT']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FFP_DATE</th>\n",
       "      <th>GENDER</th>\n",
       "      <th>FFP_TIER</th>\n",
       "      <th>WORK_CITY</th>\n",
       "      <th>WORK_PROVINCE</th>\n",
       "      <th>WORK_COUNTRY</th>\n",
       "      <th>AGE</th>\n",
       "      <th>LOAD_TIME</th>\n",
       "      <th>FLIGHT_COUNT</th>\n",
       "      <th>BP_SUM</th>\n",
       "      <th>SUM_YR_1</th>\n",
       "      <th>SUM_YR_2</th>\n",
       "      <th>SEG_KM_SUM</th>\n",
       "      <th>LAST_FLIGHT_DATE</th>\n",
       "      <th>LAST_TO_END</th>\n",
       "      <th>AVG_INTERVAL</th>\n",
       "      <th>MAX_INTERVAL</th>\n",
       "      <th>EXCHANGE_COUNT</th>\n",
       "      <th>avg_discount</th>\n",
       "      <th>Points_Sum</th>\n",
       "      <th>Point_NotFlight</th>\n",
       "      <th>FIRST_FLIGHT_DATE_2</th>\n",
       "      <th>MEMBERSHIP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2008-08-22</td>\n",
       "      <td>Male</td>\n",
       "      <td>5</td>\n",
       "      <td>Los angeles</td>\n",
       "      <td>Ca</td>\n",
       "      <td>US</td>\n",
       "      <td>64.0</td>\n",
       "      <td>2014-03-31</td>\n",
       "      <td>23</td>\n",
       "      <td>337314</td>\n",
       "      <td>116350.0</td>\n",
       "      <td>125500.0</td>\n",
       "      <td>281336</td>\n",
       "      <td>12/26/2013</td>\n",
       "      <td>97</td>\n",
       "      <td>27.863636</td>\n",
       "      <td>73</td>\n",
       "      <td>11</td>\n",
       "      <td>1.090870</td>\n",
       "      <td>372204</td>\n",
       "      <td>12</td>\n",
       "      <td>2008-08-23</td>\n",
       "      <td>67.253948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2009-04-10</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>Guiyang</td>\n",
       "      <td>Guizhou</td>\n",
       "      <td>CN</td>\n",
       "      <td>48.0</td>\n",
       "      <td>2014-03-31</td>\n",
       "      <td>152</td>\n",
       "      <td>273844</td>\n",
       "      <td>124560.0</td>\n",
       "      <td>130702.0</td>\n",
       "      <td>309928</td>\n",
       "      <td>3/27/2014</td>\n",
       "      <td>5</td>\n",
       "      <td>4.788079</td>\n",
       "      <td>47</td>\n",
       "      <td>27</td>\n",
       "      <td>0.970658</td>\n",
       "      <td>338813</td>\n",
       "      <td>39</td>\n",
       "      <td>2009-04-15</td>\n",
       "      <td>59.664469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2008-02-10</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>Guangzhou</td>\n",
       "      <td>Guangdong</td>\n",
       "      <td>CN</td>\n",
       "      <td>64.0</td>\n",
       "      <td>2014-03-31</td>\n",
       "      <td>92</td>\n",
       "      <td>313338</td>\n",
       "      <td>112364.0</td>\n",
       "      <td>76946.0</td>\n",
       "      <td>294585</td>\n",
       "      <td>1/13/2014</td>\n",
       "      <td>79</td>\n",
       "      <td>7.043956</td>\n",
       "      <td>52</td>\n",
       "      <td>10</td>\n",
       "      <td>0.967692</td>\n",
       "      <td>343121</td>\n",
       "      <td>15</td>\n",
       "      <td>2009-09-29</td>\n",
       "      <td>73.627795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2006-03-22</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>Wulumuqishi</td>\n",
       "      <td>Xinjiang</td>\n",
       "      <td>CN</td>\n",
       "      <td>46.0</td>\n",
       "      <td>2014-03-31</td>\n",
       "      <td>101</td>\n",
       "      <td>248864</td>\n",
       "      <td>120500.0</td>\n",
       "      <td>114469.0</td>\n",
       "      <td>287042</td>\n",
       "      <td>3/31/2014</td>\n",
       "      <td>1</td>\n",
       "      <td>7.190000</td>\n",
       "      <td>28</td>\n",
       "      <td>20</td>\n",
       "      <td>0.965347</td>\n",
       "      <td>298873</td>\n",
       "      <td>29</td>\n",
       "      <td>2006-03-29</td>\n",
       "      <td>96.297665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2010-04-09</td>\n",
       "      <td>Female</td>\n",
       "      <td>6</td>\n",
       "      <td>Wenzhoushi</td>\n",
       "      <td>Zhejiang</td>\n",
       "      <td>CN</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2014-03-31</td>\n",
       "      <td>73</td>\n",
       "      <td>301864</td>\n",
       "      <td>82440.0</td>\n",
       "      <td>114971.0</td>\n",
       "      <td>287230</td>\n",
       "      <td>3/29/2014</td>\n",
       "      <td>3</td>\n",
       "      <td>10.111111</td>\n",
       "      <td>45</td>\n",
       "      <td>7</td>\n",
       "      <td>0.962070</td>\n",
       "      <td>351198</td>\n",
       "      <td>14</td>\n",
       "      <td>2010-04-09</td>\n",
       "      <td>47.705292</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    FFP_DATE  GENDER  FFP_TIER    WORK_CITY WORK_PROVINCE WORK_COUNTRY   AGE  \\\n",
       "3 2008-08-22    Male         5  Los angeles            Ca           US  64.0   \n",
       "4 2009-04-10    Male         6      Guiyang       Guizhou           CN  48.0   \n",
       "5 2008-02-10    Male         6    Guangzhou     Guangdong           CN  64.0   \n",
       "6 2006-03-22    Male         6  Wulumuqishi      Xinjiang           CN  46.0   \n",
       "7 2010-04-09  Female         6   Wenzhoushi      Zhejiang           CN  50.0   \n",
       "\n",
       "   LOAD_TIME  FLIGHT_COUNT  BP_SUM  SUM_YR_1  SUM_YR_2  SEG_KM_SUM  \\\n",
       "3 2014-03-31            23  337314  116350.0  125500.0      281336   \n",
       "4 2014-03-31           152  273844  124560.0  130702.0      309928   \n",
       "5 2014-03-31            92  313338  112364.0   76946.0      294585   \n",
       "6 2014-03-31           101  248864  120500.0  114469.0      287042   \n",
       "7 2014-03-31            73  301864   82440.0  114971.0      287230   \n",
       "\n",
       "  LAST_FLIGHT_DATE  LAST_TO_END  AVG_INTERVAL  MAX_INTERVAL  EXCHANGE_COUNT  \\\n",
       "3       12/26/2013           97     27.863636            73              11   \n",
       "4        3/27/2014            5      4.788079            47              27   \n",
       "5        1/13/2014           79      7.043956            52              10   \n",
       "6        3/31/2014            1      7.190000            28              20   \n",
       "7        3/29/2014            3     10.111111            45               7   \n",
       "\n",
       "   avg_discount  Points_Sum  Point_NotFlight FIRST_FLIGHT_DATE_2  MEMBERSHIP  \n",
       "3      1.090870      372204               12          2008-08-23   67.253948  \n",
       "4      0.970658      338813               39          2009-04-15   59.664469  \n",
       "5      0.967692      343121               15          2009-09-29   73.627795  \n",
       "6      0.965347      298873               29          2006-03-29   96.297665  \n",
       "7      0.962070      351198               14          2010-04-09   47.705292  "
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data.to_csv('16-flight-EDA.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data.to_pickle('D:/nurul_jupy/streamlit-clone/data/16-flight-EDA.pickle')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "KkyLytM15_DO"
   ],
   "provenance": [
    {
     "file_id": "1gUYKtFqUap_uBpqNTbxijg9QojU9O4WN",
     "timestamp": 1660232431967
    }
   ]
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
